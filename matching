import discord
from discord.ext import commands
from discord import app_commands
import os
import random
from dotenv import load_dotenv
import asyncio
import datetime
from typing import Dict, Set, Tuple, List

# --- Environment Variables ---
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

# --- Configuration ---
SOURCE_CHANNEL_GIRLS_NAME = "女子回答"
SOURCE_CHANNEL_BOYS_NAME = "男子回答"
TARGET_CHANNEL_GIRLS_NAME = "女子選択"
TARGET_CHANNEL_BOYS_NAME = "男子選択"

# Role IDs for users allowed to react/select
ALLOWED_ROLE_IDS: Set[int] = {
    1106457108070801449,  # 例: 男子用ロールID
    1304664940019187762   # 例: 女子用ロールID
}

# Role ID allowed to execute /send1, /match, /reset etc.
EXECUTE_ROLE_ID = 991112832655560825  # 例: 管理者用役職ID

# Voice Channel IDs for matched pairs
VOICE_CHANNEL_IDS = [
    861209035901501451, 921389966939000842, 861209625353650176, 1144961582158315601,
    1346803272094191616, 1144961845891969086, 1346803325705916470, 1030459649952055326,
    861209735826898954, 889128948225679410, 1124346578522607667, 1076820944896675931,
    1129391099354546249, 1129391139905097768, 1165525003165515847, 1165611161887191070,
    1165525074317676615, 1165606798577901648, 1165606801547464765, 1165606820178567220,
    1165606757788307506, 1238860655683960853,
]

# Waiting Voice Channel ID (ユーザーが選択する際の待機VC)
WAITING_VOICE_CHANNEL_ID = 1059809361645551746

# --- Bot Setup ---
intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.message_content = True
intents.reactions = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

# --- Global State Variables ---
source_channel_girls: discord.TextChannel = None
source_channel_boys: discord.TextChannel = None
target_channel_girls: discord.TextChannel = None
target_channel_boys: discord.TextChannel = None
forwarded_message_ids: Dict[int, Set[int]] = {}
message_map: Dict[int, Tuple[int, int, int]] = {}  # {original_message_id: (forwarded_message_id, destination_channel_id, original_author_id)}
active_claimable_messages: Set[int] = set()
claimed_messages: Dict[int, int] = {}  # {forwarded_message_id: claimer_id}
users_who_claimed_this_round: Set[int] = set()
matched_pairs: Set[int] = set()
current_match_channel_index: int = 0
bot_start_time: datetime.datetime = None
last_non_winner_message_boys_id: int = None
last_non_winner_message_girls_id: int = None

# --- Custom Check ---
def allowed_role_check(interaction: discord.Interaction) -> bool:
    """EXECUTE_ROLE_IDを持つ人のみ実行可"""
    return any(role.id == EXECUTE_ROLE_ID for role in interaction.user.roles)

# --- Utility Functions ---
async def post_list_message(channel: discord.TextChannel, content: str, old_message_id: int) -> Tuple[int, List[str]]:
    """
    既存メッセージを編集し、存在しなければ新規送信する。
    戻り値: (最終的に存在するメッセージID, エラーリスト)
    """
    errors = []
    new_message_id = None
    if not channel:
        errors.append("エラー: 対象チャンネルが見つかりません。")
        return None, errors

    if old_message_id:
        try:
            old_msg = await channel.fetch_message(old_message_id)
            await old_msg.edit(content=content)
            new_message_id = old_msg.id
            return new_message_id, errors
        except discord.NotFound:
            pass
        except discord.Forbidden:
            errors.append(f"警告: チャンネル '{channel.name}' のメッセージを編集する権限がありません。")
        except Exception as e:
            errors.append(f"編集時エラー({channel.name}): {e}")

    try:
        sent_msg = await channel.send(content)
        new_message_id = sent_msg.id
    except discord.Forbidden:
        errors.append(f"エラー: チャンネル '{channel.name}' への送信権限がありません。")
    except Exception as e:
        errors.append(f"送信時エラー({channel.name}): {e}")

    return new_message_id, errors

async def calculate_non_winner_content(guild: discord.Guild) -> Tuple[str, str, List[str]]:
    """
    未当選者リストの内容を計算する。
    「未当選」かつ「待機VCに接続している」メンバーのみ表示。
    """
    global target_channel_boys, target_channel_girls, message_map, claimed_messages
    calc_errors: List[str] = []

    role_girls_id = 1304664940019187762
    role_boys_id = 1106457108070801449

    role_girls = guild.get_role(role_girls_id)
    role_boys = guild.get_role(role_boys_id)

    winners_girls = set()
    winners_boys = set()

    for fwd_id, claimer_id in claimed_messages.items():
        original_author_id = None
        dest_channel_id = None
        found = False
        for _orig_id, (fwd_id_map, dest_channel_id_map, original_author_id_map) in message_map.items():
            if fwd_id_map == fwd_id:
                original_author_id = original_author_id_map
                dest_channel_id = dest_channel_id_map
                found = True
                break
        if not found:
            calc_errors.append(f"転送ID {fwd_id} のマッピングが見つかりません。")
            continue

        if target_channel_boys and dest_channel_id == target_channel_boys.id:
            winners_boys.add(claimer_id)
            winners_girls.add(original_author_id)
        elif target_channel_girls and dest_channel_id == target_channel_girls.id:
            winners_girls.add(claimer_id)
            winners_boys.add(original_author_id)
        else:
            calc_errors.append(f"転送先チャンネルID {dest_channel_id} が不明です。")

    non_winners_boys = []
    if role_boys:
        for m in role_boys.members:
            if (m.id not in winners_boys
                and m.voice
                and m.voice.channel
                and m.voice.channel.id == WAITING_VOICE_CHANNEL_ID):
                non_winners_boys.append(m.mention)

    non_winners_girls = []
    if role_girls:
        for m in role_girls.members:
            if (m.id not in winners_girls
                and m.voice
                and m.voice.channel
                and m.voice.channel.id == WAITING_VOICE_CHANNEL_ID):
                non_winners_girls.append(m.mention)

    content_boys = "【男子 未当選者一覧】\n" + (", ".join(non_winners_boys) if non_winners_boys else "なし")
    content_girls = "【女子 未当選者一覧】\n" + (", ".join(non_winners_girls) if non_winners_girls else "なし")

    return content_boys, content_girls, calc_errors

# --- Bot Events ---
@bot.event
async def on_ready():
    global source_channel_girls, source_channel_boys
    global target_channel_girls, target_channel_boys
    global forwarded_message_ids, bot_start_time

    print(f'{bot.user.name} としてログイン (ID: {bot.user.id})')
    bot_start_time = datetime.datetime.now(datetime.timezone.utc)

    try:
        synced = await bot.tree.sync()
        print(f"{len(synced)}個のスラッシュコマンドを同期しました。")
    except Exception as e:
        print(f"コマンド同期エラー: {e}")

    if not bot.guilds:
        print("エラー: 参加サーバーがありません。")
        await bot.close()
        return

    guild = bot.guilds[0]
    source_channel_girls = discord.utils.get(guild.text_channels, name=SOURCE_CHANNEL_GIRLS_NAME)
    source_channel_boys = discord.utils.get(guild.text_channels, name=SOURCE_CHANNEL_BOYS_NAME)
    target_channel_girls = discord.utils.get(guild.text_channels, name=TARGET_CHANNEL_GIRLS_NAME)
    target_channel_boys = discord.utils.get(guild.text_channels, name=TARGET_CHANNEL_BOYS_NAME)

    if not all([source_channel_girls, source_channel_boys, target_channel_girls, target_channel_boys]):
        print("必要なチャンネルが見つかりません。")
    else:
        forwarded_message_ids = {
            source_channel_girls.id: set(),
            source_channel_boys.id: set()
        }
    print("Bot準備完了。")

@bot.event
async def on_message_edit(before: discord.Message, after: discord.Message):
    if before.author.bot or before.id not in message_map:
        return

    forwarded_message_id, destination_channel_id, _ = message_map[before.id]
    destination_channel = bot.get_channel(destination_channel_id)
    if not destination_channel or not isinstance(destination_channel, discord.TextChannel):
        return

    try:
        f_msg = await destination_channel.fetch_message(forwarded_message_id)
    except discord.NotFound:
        return
    except Exception as e:
        print(f"[on_message_edit] 転送先メッセージ取得エラー: {e}")
        return

    new_content = after.content if after.content else "(本文なし)"
    try:
        if f_msg.embeds:
            new_embed = f_msg.embeds[0].copy()
            new_embed.description = new_content
            await f_msg.edit(embed=new_embed)
        else:
            await f_msg.edit(content=new_content)
    except Exception as e:
        print(f"[on_message_edit] 転送先更新エラー: {e}")

@bot.event
async def on_message_delete(message: discord.Message):
    global last_non_winner_message_boys_id, last_non_winner_message_girls_id

    if message.author.bot or message.id not in message_map:
        return

    forwarded_message_id, destination_channel_id, _ = message_map.pop(message.id)
    destination_channel = bot.get_channel(destination_channel_id)

    active_claimable_messages.discard(forwarded_message_id)
    if forwarded_message_id in claimed_messages:
        claimer_id = claimed_messages.pop(forwarded_message_id)
        users_who_claimed_this_round.discard(claimer_id)
        matched_pairs.discard(forwarded_message_id)

    if destination_channel and isinstance(destination_channel, discord.TextChannel):
        try:
            f_msg = await destination_channel.fetch_message(forwarded_message_id)
            await f_msg.delete()
        except discord.NotFound:
            pass
        except Exception as e:
            print(f"[on_message_delete] 転送先メッセージ削除エラー: {e}")

    try:
        if message.guild:
            content_boys, content_girls, calc_errors = await calculate_non_winner_content(message.guild)
            if calc_errors:
                for err in calc_errors:
                    print(f"[on_message_delete] リスト更新計算エラー: {err}")

            if target_channel_boys and any(v[1] == target_channel_boys.id for v in message_map.values()):
                new_id, errors = await post_list_message(target_channel_boys, content_boys, last_non_winner_message_boys_id)
                if new_id:
                    last_non_winner_message_boys_id = new_id
                for err in errors:
                    print(f"[on_message_delete] 男子未当選リスト投稿エラー: {err}")

            if target_channel_girls and any(v[1] == target_channel_girls.id for v in message_map.values()):
                new_id, errors = await post_list_message(target_channel_girls, content_girls, last_non_winner_message_girls_id)
                if new_id:
                    last_non_winner_message_girls_id = new_id
                for err in errors:
                    print(f"[on_message_delete] 女子未当選リスト投稿エラー: {err}")
    except Exception as e:
        print(f"[on_message_delete] 未当選者リスト再更新エラー: {e}")

@bot.event
async def on_raw_reaction_add(payload: discord.RawReactionActionEvent):
    global last_non_winner_message_boys_id, last_non_winner_message_girls_id
    if payload.user_id == bot.user.id or str(payload.emoji) != '👍':
        return

    guild = bot.get_guild(payload.guild_id)
    if not guild: return
    channel = guild.get_channel(payload.channel_id)
    if not isinstance(channel, discord.TextChannel): return

    try:
        message = await channel.fetch_message(payload.message_id)
    except Exception as e:
        print(f"リアクションメッセージ取得エラー: {e}")
        return

    member = payload.member or (await guild.fetch_member(payload.user_id))
    if payload.message_id not in active_claimable_messages: return

    if (
        payload.message_id in claimed_messages or
        payload.user_id in users_who_claimed_this_round or
        not (member.voice and member.voice.channel and member.voice.channel.id == WAITING_VOICE_CHANNEL_ID) or
        not any(role.id in ALLOWED_ROLE_IDS for role in member.roles)
    ):
        try: await message.remove_reaction(payload.emoji, member)
        except: pass
        return

    claimed_messages[payload.message_id] = payload.user_id
    users_who_claimed_this_round.add(payload.user_id)
    active_claimable_messages.remove(payload.message_id)

    try:
        await message.clear_reaction('👍')
        await message.add_reaction('✅')
        if message.embeds:
            new_embed = message.embeds[0].copy()
            selector_index = -1
            for i, field in enumerate(new_embed.fields):
                if field.name == "選択者": selector_index = i; break
            if selector_index != -1:
                new_embed.set_field_at(selector_index, name="選択者", value=f"✅ {member.mention}", inline=False)
            else:
                new_embed.add_field(name="選択者", value=f"✅ {member.mention}", inline=False)
            await message.edit(embed=new_embed)
        else:
            await message.edit(content=message.content + f"\n✅ {member.mention} さんが選択しました！")

        content_boys, content_girls, _ = await calculate_non_winner_content(guild)
        if target_channel_boys and any(v[1] == target_channel_boys.id for v in message_map.values()):
            new_id, _ = await post_list_message(target_channel_boys, content_boys, last_non_winner_message_boys_id)
            if new_id: last_non_winner_message_boys_id = new_id
        if target_channel_girls and any(v[1] == target_channel_girls.id for v in message_map.values()):
            new_id, _ = await post_list_message(target_channel_girls, content_girls, last_non_winner_message_girls_id)
            if new_id: last_non_winner_message_girls_id = new_id
    except Exception as e:
        print(f"リアクション更新エラー: {e}")
        claimed_messages.pop(payload.message_id, None)
        users_who_claimed_this_round.discard(payload.user_id)
        active_claimable_messages.add(payload.message_id)

# --- Slash Commands ---
@bot.tree.command(name="send1", description="回答を転送し、未当選者リストを更新")
@app_commands.check(allowed_role_check)
async def send_messages(interaction: discord.Interaction):
    global forwarded_message_ids, message_map, active_claimable_messages, last_non_winner_message_boys_id, last_non_winner_message_girls_id
    if not all([source_channel_girls, source_channel_boys, target_channel_girls, target_channel_boys]):
        await interaction.response.send_message("エラー: 必要なチャンネルが設定されていません。", ephemeral=True)
        return
    await interaction.response.defer(ephemeral=True)
    error_messages_list: List[str] = []
    
    async def process_channel(source_channel, target_channel, embed_color):
        count = 0
        try:
            source_messages = [
                msg async for msg in source_channel.history(limit=None, after=bot_start_time)
                if not msg.author.bot and msg.id not in forwarded_message_ids.get(source_channel.id, set()) and msg.id not in message_map and (msg.content or msg.attachments)
            ]
            random.shuffle(source_messages)
            for orig_msg in source_messages:
                try:
                    embed = discord.Embed(description=orig_msg.content if orig_msg.content else "(本文なし)", color=embed_color, timestamp=orig_msg.created_at)
                    image_url = next((att.url for att in orig_msg.attachments if att.content_type and att.content_type.startswith('image/')), None)
                    if image_url:
                        embed.set_image(url=image_url)
                    others = [att.filename for att in orig_msg.attachments if att.url != image_url]
                    if others:
                        embed.add_field(name="添付ファイル", value="\n".join(f"- {name}" for name in others), inline=False)
                    embed.add_field(name="選択者", value="なし", inline=False)
                    fwd_msg = await target_channel.send(embed=embed)
                    await fwd_msg.add_reaction("👍")
                    forwarded_message_ids[source_channel.id].add(orig_msg.id)
                    message_map[orig_msg.id] = (fwd_msg.id, target_channel.id, orig_msg.author.id)
                    active_claimable_messages.add(fwd_msg.id)
                    count += 1
                    await asyncio.sleep(0.5)
                except Exception as e:
                    error_messages_list.append(f"転送中エラー (ID:{orig_msg.id}): {e}")
            return count
        except Exception as e:
            error_messages_list.append(f"{source_channel.name} 処理中エラー: {e}")
            return count

    count_g = await process_channel(source_channel_girls, target_channel_boys, discord.Color.fuchsia())
    count_b = await process_channel(source_channel_boys, target_channel_girls, discord.Color.blue())
    total_forwarded_count = count_g + count_b

    if total_forwarded_count > 0 and interaction.guild:
        content_boys, content_girls, calc_errors = await calculate_non_winner_content(interaction.guild)
        error_messages_list.extend(calc_errors)
        if target_channel_boys and any(v[1] == target_channel_boys.id for v in message_map.values()):
            new_id, post_err = await post_list_message(target_channel_boys, content_boys, last_non_winner_message_boys_id)
            if new_id: last_non_winner_message_boys_id = new_id
            error_messages_list.extend(post_err)
        if target_channel_girls and any(v[1] == target_channel_girls.id for v in message_map.values()):
            new_id, post_err = await post_list_message(target_channel_girls, content_girls, last_non_winner_message_girls_id)
            if new_id: last_non_winner_message_girls_id = new_id
            error_messages_list.extend(post_err)
    
    result_msg = f"合計 {total_forwarded_count} 件の新規転送完了。"
    if error_messages_list:
        result_msg += "\nエラー/警告:\n" + "\n".join(f"- {msg}" for msg in error_messages_list)
    else:
        result_msg += "\n未当選者リストを更新しました。"
    await interaction.followup.send(result_msg, ephemeral=True)

# ===================================================================
# ★★★ /match コマンド（guild.chunk 完全削除版） ★★★
# ===================================================================
@bot.tree.command(name="match", description="ペア移動＆状態リセット＆リスト更新")
@app_commands.check(allowed_role_check)
async def match_all(interaction: discord.Interaction):
    """
    選択済みペアを VC へ移動し、状態をリセットする高速版
    ※ Guild.query_members(user_ids=…) で一括取得
    """
    # ---- グローバル ----------------------------------------------------
    global current_match_channel_index, matched_pairs
    global forwarded_message_ids, message_map, active_claimable_messages
    global claimed_messages, users_who_claimed_this_round
    global last_non_winner_message_boys_id, last_non_winner_message_girls_id
    global source_channel_girls, source_channel_boys, target_channel_boys, target_channel_girls

    await interaction.response.defer(ephemeral=True)
    guild: discord.Guild | None = interaction.guild
    if guild is None:
        await interaction.followup.send("サーバー情報取得エラー", ephemeral=True)
        return

    # ---- 1. ペア収集 ---------------------------------------------------
    pairs: list[dict] = []
    need_ids: set[int] = set()
    logs: list[str]  = []

    for o_id, (fwd_id, dest_id, author_id) in list(message_map.items()):
        if fwd_id not in claimed_messages or fwd_id in matched_pairs:
            continue
        if current_match_channel_index >= len(VOICE_CHANNEL_IDS):
            logs.append("エラー: 移動先 VC が不足したため残りをスキップ。")
            break

        vc = guild.get_channel(VOICE_CHANNEL_IDS[current_match_channel_index])
        if not isinstance(vc, discord.VoiceChannel):
            logs.append(f"警告: VC {VOICE_CHANNEL_IDS[current_match_channel_index]} が見つかりません。")
            continue

        claimer_id = claimed_messages[fwd_id]
        pairs.append({
            "orig_id": o_id, "fwd_id": fwd_id, "dest_id": dest_id,
            "author_id": author_id, "claimer_id": claimer_id, "vc": vc
        })
        need_ids.update((author_id, claimer_id))
        current_match_channel_index += 1

    # ---- 2. メンバー一括取得 -----------------------------------------
    cache: dict[int, discord.Member] = {}
    if need_ids:
        try:
            members = await guild.query_members(limit=None, user_ids=list(need_ids)).flatten()
            cache = {m.id: m for m in members}
        except AttributeError:             # さらに古いバージョン対策
            for uid in need_ids:
                try:
                    cache[uid] = await guild.fetch_member(uid)
                except discord.NotFound:
                    pass
                except Exception as e:
                    logs.append(f"fetch_member 失敗 ({uid}): {e}")
        except Exception as e:
            await interaction.followup.send(f"メンバー情報取得エラー: {e}", ephemeral=True)
            return

    # ---- 3. ペアごとの処理 -------------------------------------------
    async def handle(pair: dict) -> tuple[bool, str]:
        fwd   = pair["fwd_id"]
        dest  = pair["dest_id"]
        a_id  = pair["author_id"]
        c_id  = pair["claimer_id"]
        vc    = pair["vc"]

        try:
            m1 = cache.get(a_id); m2 = cache.get(c_id)
            if not m1 or not m2:
                return False, f"メンバー未取得 (Fwd:{fwd})"

            for m in (m1, m2):
                if not (m.voice and m.voice.channel and m.voice.channel.id == WAITING_VOICE_CHANNEL_ID):
                    return False, f"{m.display_name} が待機 VC にいません"

            await asyncio.gather(m1.move_to(vc), m2.move_to(vc))

            txt = guild.get_channel(dest)
            if isinstance(txt, discord.TextChannel):
                msg = await txt.fetch_message(fwd)
                if msg.embeds:
                    emb = msg.embeds[0].copy()
                    idx = {f.name: i for i, f in enumerate(emb.fields)}
                    status = f"✅ 移動完了 ({vc.mention})"
                    emb.set_field_at(idx.get("状態", len(emb.fields)),
                                     name="状態", value=status, inline=False,
                                     insert=True)
                    emb.set_field_at(idx.get("回答者", len(emb.fields)),
                                     name="回答者", value=m1.mention, inline=False,
                                     insert=True)
                    await msg.edit(embed=emb)
            return True, str(fwd)
        except Exception as e:
            return False, f"処理エラー (Fwd:{fwd}): {e}"

    ok_cnt = 0
    for ok, note in await asyncio.gather(*(handle(p) for p in pairs)):
        if ok:
            ok_cnt += 1
            matched_pairs.add(int(note))
        else:
            logs.append(f"警告: {note}")

    # ---- 4. 後片付け ---------------------------------------------------
    processed_oids  = {p["orig_id"] for p in pairs if p["fwd_id"] in matched_pairs}
    processed_cids  = {p["claimer_id"] for p in pairs if p["fwd_id"] in matched_pairs}

    for oid in processed_oids:
        message_map.pop(oid, None)
    for fid in matched_pairs:
        claimed_messages.pop(fid, None)
        active_claimable_messages.discard(fid)

    users_who_claimed_this_round -= processed_cids
    matched_pairs.clear()
    current_match_channel_index = 0
    last_non_winner_message_boys_id = None
    last_non_winner_message_girls_id = None

    # ---- 5. 未当選者リスト更新 ----------------------------------------
    try:
        boys, girls, errs = await calculate_non_winner_content(guild)
        logs.extend(errs)
        if target_channel_boys:
            new, err = await post_list_message(target_channel_boys, boys, last_non_winner_message_boys_id)
            if new: last_non_winner_message_boys_id = new
            logs.extend(err)
        if target_channel_girls:
            new, err = await post_list_message(target_channel_girls, girls, last_non_winner_message_girls_id)
            if new: last_non_winner_message_girls_id = new
            logs.extend(err)
    except Exception as e:
        logs.append(f"未当選者リスト更新エラー: {e}")

    # ---- 6. 返信 -------------------------------------------------------
    msg = f"ペア移動 {ok_cnt} 組完了。"
    if logs:
        msg += "\nエラー/警告:\n" + "\n".join(f"- {l}" for l in logs)
    else:
        msg += "\n状態リセット・リスト更新完了。"
    await interaction.followup.send(msg, ephemeral=True)



@bot.tree.command(name="reset-reactions", description="すべての選択肢のリアクションをリセットし、未選択の状態に戻します。")
@app_commands.check(allowed_role_check)
async def reset_all_reactions(interaction: discord.Interaction):
    """
    現在アクティブな全てのメッセージの選択状態をリセットする。
    メッセージは削除せず、リアクションと内部状態のみを初期化する。
    """
    global claimed_messages, users_who_claimed_this_round, active_claimable_messages
    global last_non_winner_message_boys_id, last_non_winner_message_girls_id

    await interaction.response.defer(ephemeral=True)

    guild = interaction.guild
    if not guild:
        await interaction.followup.send("サーバー情報の取得に失敗しました。", ephemeral=True)
        return

    if not message_map:
        await interaction.followup.send("リセット対象のメッセージがありません。", ephemeral=True)
        return

    error_log = []
    success_count = 0

    async def reset_one_message(fwd_id: int, dest_id: int):
        try:
            channel = guild.get_channel(dest_id)
            if not channel or not isinstance(channel, discord.TextChannel):
                return (False, f"チャンネルが見つかりません (ID: {dest_id})")
            
            message = await channel.fetch_message(fwd_id)
            await message.clear_reactions()
            await message.add_reaction('👍')
            
            if message.embeds:
                new_embed = message.embeds[0].copy()
                for i, field in enumerate(new_embed.fields):
                    if field.name == "選択者":
                        new_embed.set_field_at(i, name="選択者", value="なし", inline=False)
                        await message.edit(embed=new_embed)
                        break
            return (True, f"メッセージ {fwd_id} をリセットしました。")
        except discord.NotFound:
            return (False, f"メッセージが見つかりません (ID: {fwd_id})")
        except Exception as e:
            return (False, f"メッセージ {fwd_id} のリセット中にエラー: {e}")

    tasks = [reset_one_message(fwd_id, dest_id) for _, (fwd_id, dest_id, _) in message_map.items()]
    results = await asyncio.gather(*tasks)

    for success, message in results:
        if success:
            success_count += 1
        else:
            error_log.append(message)
    
    active_claimable_messages.clear()
    active_claimable_messages.update([val[0] for val in message_map.values()])
    claimed_messages.clear()
    users_who_claimed_this_round.clear()

    try:
        content_boys, content_girls, calc_errors = await calculate_non_winner_content(guild)
        error_log.extend(calc_errors)

        if target_channel_boys:
            new_id, post_errs = await post_list_message(target_channel_boys, content_boys, last_non_winner_message_boys_id)
            if new_id: last_non_winner_message_boys_id = new_id
            error_log.extend(post_errs)

        if target_channel_girls:
            new_id, post_errs = await post_list_message(target_channel_girls, content_girls, last_non_winner_message_girls_id)
            if new_id: last_non_winner_message_girls_id = new_id
            error_log.extend(post_errs)
            
    except Exception as e:
        error_log.append(f"未当選者リストの更新中にエラーが発生しました: {e}")

    response_message = f"{success_count}件のメッセージのリアクションをリセットしました。"
    if error_log:
        error_summary = "\n".join(f"- {err}" for err in error_log)
        response_message += f"\n\n以下の警告があります:\n{error_summary}"

    await interaction.followup.send(response_message, ephemeral=True)

@bot.tree.command(name="reset", description="すべての状態を強制的にリセットします（メッセージも削除）")
@app_commands.check(allowed_role_check)
async def reset_command(interaction: discord.Interaction):
    global forwarded_message_ids, message_map, active_claimable_messages, claimed_messages, users_who_claimed_this_round, matched_pairs, current_match_channel_index, last_non_winner_message_boys_id, last_non_winner_message_girls_id, source_channel_girls, source_channel_boys
    await interaction.response.defer(ephemeral=True)
    error_messages_list = []
    guild = interaction.guild
    if not guild:
        await interaction.followup.send("サーバー情報取得エラー", ephemeral=True)
        return
        
    try:
        tasks = []
        for _, (fwd_id, dest_id, _) in list(message_map.items()):
            channel = bot.get_channel(dest_id)
            if channel and isinstance(channel, discord.TextChannel):
                async def delete_msg(ch, msg_id):
                    try:
                        await (await ch.fetch_message(msg_id)).delete()
                    except: pass
                tasks.append(delete_msg(channel, fwd_id))
        await asyncio.gather(*tasks)
    except Exception as e:
        error_messages_list.append(f"一括削除中エラー: {e}")
        
    try:
        if source_channel_girls and source_channel_boys:
            forwarded_message_ids = {source_channel_girls.id: set(), source_channel_boys.id: set()}
        else:
            forwarded_message_ids = {}
        message_map.clear()
        active_claimable_messages.clear()
        claimed_messages.clear()
        users_who_claimed_this_round.clear()
        matched_pairs.clear()
        current_match_channel_index = 0
        last_non_winner_message_boys_id = None
        last_non_winner_message_girls_id = None
    except Exception as e:
        error_messages_list.append(f"状態初期化中エラー: {e}")
        
    if error_messages_list:
        result_msg = "リセット完了（警告あり）:\n" + "\n".join(f"- {m}" for m in error_messages_list)
    else:
        result_msg = "すべての状態をリセットしました。"
    await interaction.followup.send(result_msg, ephemeral=True)

# --- Bot Execution ---
if TOKEN:
    try:
        print("Bot起動中...")
        bot.run(TOKEN)
    except discord.LoginFailure:
        print("トークンエラー")
    except Exception as e:
        print(f"起動エラー: {e}")
else:
    print("DISCORD_TOKEN 未設定")
